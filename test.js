// // // // // // // // // // // // // // // // // // // // // // // // // // // //  跑逐行读取-赛马网考试

// // // // // // // // // // // // // // // // // // // // // // // // // // // const fs = require('fs');
// // // // // // // // // // // // // // // // // // // // // // // // // // // const readline = require('readline');
// // // // // // // // // // // // // // // // // // // // // // // // // // // let line = null

// // // // // // // // // // // // // // // // // // // // // // // // // // // const rl = readline.createInterface({
// // // // // // // // // // // // // // // // // // // // // // // // // // //   input: fs.createReadStream('sample.txt'),
// // // // // // // // // // // // // // // // // // // // // // // // // // //   crlfDelay: Infinity
// // // // // // // // // // // // // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // // // // // // // // // // // // // rl.on('line', (line = read_line) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(`文件中的每一行: ${line}`);
// // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log(readline)
// // // // // // // // // // // // // // // // // // // // // // // // // // // });


// // // // // // // // // // // // // // // // // // // // // // // // // // // // Javascript
// // // // // // // // // // // // // // // // // // // // // // // // // // // var N, M;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // 每组第一行是2个整数，N和M，至于为啥用while，因为是多组。
// // // // // // // // // // // // // // // // // // // // // // // // // // // while ((N=readInt()) != null && (M=readInt()) != null) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   print (N + ' ' + M);
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // 循环读取“接下来的M行”
// // // // // // // // // // // // // // // // // // // // // // // // // // //   for (let i=0; i<M; i++) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let a = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let b = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let c = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     // 每行是3个整数，a，b，c。
// // // // // // // // // // // // // // // // // // // // // // // // // // //     print(a + ' ' + b + ' ' + c);
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // M行读取完了，就又要开始下一组了，去while那里。
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // let line;
// // // // // // // // // // // // // // // // // // // // // // // // // // // while(line = read_line){
// // // // // // // // // // // // // // // // // // // // // // // // // // //   let arr = line.split(' ')
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // /*

// // // // // // // // // // // // // // // // // // // // // // // // // // 逆序五进制
// // // // // // // // // // // // // // // // // // // // // // // // // // 时间限制： 3000MS 
// // // // // // // // // // // // // // // // // // // // // // // // // // 内存限制： 589824KB
// // // // // // // // // // // // // // // // // // // // // // // // // // 题目描述：
// // // // // // // // // // // // // // // // // // // // // // // // // // 编写一个程序，首先将一个十进制正整数逆序【需要去掉前导0】，然后转换成五进制正整数，最后输出该五进制正整数。



// // // // // // // // // // // // // // // // // // // // // // // // // // 输入描述
// // // // // // // // // // // // // // // // // // // // // // // // // // 单组输入。

// // // // // // // // // // // // // // // // // // // // // // // // // // 每组测试数据的输入占一行，输入一个十进制正整数n。 （n<=100000）

// // // // // // // // // // // // // // // // // // // // // // // // // // 输出描述
// // // // // // // // // // // // // // // // // // // // // // // // // // 每组测试数据的输出占一行，输出转换后所得的五进制正整数。


// // // // // // // // // // // // // // // // // // // // // // // // // // 样例输入
// // // // // // // // // // // // // // // // // // // // // // // // // // 1000
// // // // // // // // // // // // // // // // // // // // // // // // // // 样例输出
// // // // // // // // // // // // // // // // // // // // // // // // // // 1

// // // // // // // // // // // // // // // // // // // // // // // // // // 提示
// // // // // // // // // // // // // // // // // // // // // // // // // // 样例2：
// // // // // // // // // // // // // // // // // // // // // // // // // // 输入：
// // // // // // // // // // // // // // // // // // // // // // // // // // 77267

// // // // // // // // // // // // // // // // // // // // // // // // // // 输出：
// // // // // // // // // // // // // // // // // // // // // // // // // // 4420102


// // // // // // // // // // // // // // // // // // // // // // // // // // */

// // // // // // // // // // // // // // // // // // // // // // // // // // // const loseZero = (value) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   let tempStr = '', headStatus = true;

// // // // // // // // // // // // // // // // // // // // // // // // // // //   for(let i = 0; i < value.length;i++ ){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let item = value[i];
// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(item == 0 && headStatus) continue;
// // // // // // // // // // // // // // // // // // // // // // // // // // //     headStatus = false;
// // // // // // // // // // // // // // // // // // // // // // // // // // //     tempStr = tempStr + item;
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // // //   return tempStr;
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // let str = '1000'
// // // // // // // // // // // // // // // // // // // // // // // // // // // // let str;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // while ((str=readInt()) != null) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   let result, reserve = '';
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // 反转
// // // // // // // // // // // // // // // // // // // // // // // // // // //   for(let i = str.length; i--; i < 0){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     reserve =reserve + str[i];
// // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log(reserve)
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // 去0
// // // // // // // // // // // // // // // // // // // // // // // // // // //   result = loseZero(reserve);


// // // // // // // // // // // // // // // // // // // // // // // // // // //   // return (result - 0).toString(5)
// // // // // // // // // // // // // // // // // // // // // // // // // // // //}

// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log("reserve",result,(result - 0).toString(5))


// // // // // // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // // // // // //  let str;
// // // // // // // // // // // // // // // // // // // // // // // // // //   const loseZero = (value) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //       let tempStr = '', headStatus = true;

// // // // // // // // // // // // // // // // // // // // // // // // // //       for(let i = 0; i < value.length;i++ ){
// // // // // // // // // // // // // // // // // // // // // // // // // //         let item = value[i];
// // // // // // // // // // // // // // // // // // // // // // // // // //         if(item == 0 && headStatus) continue;
// // // // // // // // // // // // // // // // // // // // // // // // // //         headStatus = false;
// // // // // // // // // // // // // // // // // // // // // // // // // //         tempStr = tempStr + item;
// // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // //   return tempStr;
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // //  while ((str=readInt()) != null) {
// // // // // // // // // // // // // // // // // // // // // // // // // //   let result, reserve = '';
// // // // // // // // // // // // // // // // // // // // // // // // // //       str = str + '';

// // // // // // // // // // // // // // // // // // // // // // // // // //   // 反转
// // // // // // // // // // // // // // // // // // // // // // // // // //   for(let i = str.length; i--; i < 0){
// // // // // // // // // // // // // // // // // // // // // // // // // //     reserve =reserve + str[i];
// // // // // // // // // // // // // // // // // // // // // // // // // //   } 
// // // // // // // // // // // // // // // // // // // // // // // // // //   // 去0
// // // // // // // // // // // // // // // // // // // // // // // // // //   result = loseZero(reserve);
// // // // // // // // // // // // // // // // // // // // // // // // // //  // 转进制 
// // // // // // // // // // // // // // // // // // // // // // // // // //     print((result - 0).toString(5))
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // */


// // // // // // // // // // // // // // // // // // // // // // // // // // // let str = '1 1 3';
// // // // // // // // // // // // // // // // // // // // // // // // // // // let arr = str.split(' ');
// // // // // // // // // // // // // // // // // // // // // // // // // // // let result = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // let operateType = arr[0],
// // // // // // // // // // // // // // // // // // // // // // // // // // //     index = arr[1],
// // // // // // // // // // // // // // // // // // // // // // // // // // //     addNum = arr[2];

// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(operateType == 1 && index && addNum){
// // // // // // // // // // // // // // // // // // // // // // // // // // //       result.splice(index-1, 0, addNum)
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(operateType == 2 && index){
// // // // // // // // // // // // // // // // // // // // // // // // // // //       result.splice(index, 1)
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(operateType == 3){
// // // // // // // // // // // // // // // // // // // // // // // // // // //       result.forEach(item => print(item));
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log("result",result)


// // // // // // // // // // // // // // // // // // // // // // // // // // // var N, M, K;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // 每组第一行是2个整数，N和M，至于为啥用while，因为是多组。
// // // // // // // // // // // // // // // // // // // // // // // // // // // while ((N=readInt()) != null && (M=readInt()) != null && (K=readInt()) != null) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // 循环读取“接下来的M行”
// // // // // // // // // // // // // // // // // // // // // // // // // // //   for (let i=0; i<M; i++) {
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let a = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let b = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     let c = readInt();
// // // // // // // // // // // // // // // // // // // // // // // // // // //     // 每行是3个整数，a，b，c。
// // // // // // // // // // // // // // // // // // // // // // // // // // //     print(a + ' ' + b + ' ' + c);
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // //   // M行读取完了，就又要开始下一组了，去while那里。
// // // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // // let line, count = 0, total = 0, totalNum =0, limit = 0, numArr = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // while(line = read_line){
// // // // // // // // // // // // // // // // // // // // // // // // // // //   let arr = line.split(' ');
// // // // // // // // // // // // // // // // // // // // // // // // // // //   if(count > 0){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(limit <= count){
// // // // // // // // // // // // // // // // // // // // // // // // // // //       count = 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // //       total= 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // //       numArr = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // //     if(count === 1){
// // // // // // // // // // // // // // // // // // // // // // // // // // //       total = arr[2];
// // // // // // // // // // // // // // // // // // // // // // // // // // //       limit = arr[0];
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // //     count++;
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // let a = "213234";

// // // // // // // // // // // // // // // // // // // // // // // // // // // let obj = {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   a:1
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // function fn(arg01, arg02){
// // // // // // // // // // // // // // // // // // // // // // // // // // //   console.log("a:",this.a, arg01, arg02)
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // fn.bind(obj)("123","213");

// // // // // // // // // // // // // // // // // // // // // // // // // // // Function.prototype.myBind = function(context,...arg01){
// // // // // // // // // // // // // // // // // // // // // // // // // // //   const fn = this;

// // // // // // // // // // // // // // // // // // // // // // // // // // //   return function(...arg02){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     return fn.apply(context,[...arg01, ...arg02])
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // // // // // //   模拟实现一个new
// // // // // // // // // // // // // // // // // // // // // // // // // // */

// // // // // // // // // // // // // // // // // // // // // // // // // // // function mockNew(obj, ...arg){
// // // // // // // // // // // // // // // // // // // // // // // // // // //   const newObj = new Object();
// // // // // // // // // // // // // // // // // // // // // // // // // // //   const result =  obj.call(newObj,...arg);

// // // // // // // // // // // // // // // // // // // // // // // // // // //   newObj.__proto__ = Object.create(obj.pototype);

// // // // // // // // // // // // // // // // // // // // // // // // // // //   if( typeof result === "object") return result;
// // // // // // // // // // // // // // // // // // // // // // // // // // //   return newObj;
// // // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(typeof function a(){})

// // // // // // // // // // // // // // // // // // // // // // // // // // // let obj = {
// // // // // // // // // // // // // // // // // // // // // // // // // // //   name:"NB啊王宇翔",
// // // // // // // // // // // // // // // // // // // // // // // // // // //   val: "WYX🐂比啊",
// // // // // // // // // // // // // // // // // // // // // // // // // // //   obj :{
// // // // // // // // // // // // // // // // // // // // // // // // // // //     te:"te ",
// // // // // // // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // let  test = obj;
// // // // // // // // // // // // // // // // // // // // // // // // // // // test.p = "ppp";
// // // // // // // // // // // // // // // // // // // // // // // // // // // test.obj.obj = "4343"
// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(obj)

// // // // // // // // // // // // // // // // // // // // // // // // // // /*二叉树的各种遍历*/

// // // // // // // // // // // // // // // // // // // // // // // // // // /*前序*/

// // // // // // // // // // // // // // // // // // // // // // // // // //   /* 递归版本： */
// // // // // // // // // // // // // // // // // // // // // // // // // //   var preorderTraversal = function(root) {
// // // // // // // // // // // // // // // // // // // // // // // // // //     const arr = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //     const fn = (node) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //         if(!node) return null;
// // // // // // // // // // // // // // // // // // // // // // // // // //         arr.push(node.val);
// // // // // // // // // // // // // // // // // // // // // // // // // //         if(node.left)   fn(node.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //         if(node.right)  fn(node.right);
// // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // //         fn(root)
// // // // // // // // // // // // // // // // // // // // // // // // // //         return arr;
// // // // // // // // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // // // // // // // //     /* 迭代版本： 感觉要用到栈结构(这里的迭代是三种遍历最简单的一种)*/ 
// // // // // // // // // // // // // // // // // // // // // // // // // //     var preorderTraversal = function(root) {
// // // // // // // // // // // // // // // // // // // // // // // // // //       if(!root) return [];

// // // // // // // // // // // // // // // // // // // // // // // // // //         let stack = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //         let arr = [];

// // // // // // // // // // // // // // // // // // // // // // // // // //         stack.push(root);
// // // // // // // // // // // // // // // // // // // // // // // // // //         while(stack.length > 0){
// // // // // // // // // // // // // // // // // // // // // // // // // //           let node = stack.pop();
// // // // // // // // // // // // // // // // // // // // // // // // // //           arr.push(node.val);
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(node.right) stack.push(node.right); //注意：右孩子先进入
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(node.left)  stack.push(node.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // // //         return arr;
// // // // // // // // // // // // // // // // // // // // // // // // // //       };

// // // // // // // // // // // // // // // // // // // // // // // // // // /* 中序 */
// // // // // // // // // // // // // // // // // // // // // // // // // //       /*  递归版本： */
// // // // // // // // // // // // // // // // // // // // // // // // // //       var inorderTraversal = function(root) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         const arr = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //         const fn =(node) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(!node) return null;
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(node.left) fn(node.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //           arr.push(node.val);
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(node.right) fn(node.right);
// // // // // // // // // // // // // // // // // // // // // // // // // //         };
// // // // // // // // // // // // // // // // // // // // // // // // // //         fn(root);

// // // // // // // // // // // // // // // // // // // // // // // // // //         return arr;
// // // // // // // // // // // // // // // // // // // // // // // // // //       };

// // // // // // // // // // // // // // // // // // // // // // // // // //       /*  非递归版本  */
// // // // // // // // // // // // // // // // // // // // // // // // // // function inorder(root) {//中序非递归   BST第K小的数   第K大见下面
// // // // // // // // // // // // // // // // // // // // // // // // // //    if (!root) return null;
// // // // // // // // // // // // // // // // // // // // // // // // // //     var stack = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //     var p = root;
// // // // // // // // // // // // // // // // // // // // // // // // // //     //var pre=-Infinity;
// // // // // // // // // // // // // // // // // // // // // // // // // //     while (stack.length > 0 || p) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         if (p) { //当前非空，当前入栈，左移
// // // // // // // // // // // // // // // // // // // // // // // // // //             stack.push(p);
// // // // // // // // // // // // // // // // // // // // // // // // // //             p = p.left;
// // // // // // // // // // // // // // // // // // // // // // // // // //         } else { //栈弹出，并右移
// // // // // // // // // // // // // // // // // // // // // // // // // //             p = stack.pop();
// // // // // // // // // // // // // // // // // // // // // // // // // //             console.log(p.value);//在此和前一个数比较 判断是否为二叉搜索树 
// // // // // // // // // // // // // // // // // // // // // // // // // //             p = p.right;
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // //       var inorderTraversal = function(root) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         let arr =[], stack = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //         stack.push(root);

// // // // // // // // // // // // // // // // // // // // // // // // // //         while(stack.length){
// // // // // // // // // // // // // // // // // // // // // // // // // //           const temp = stack.pop();

// // // // // // // // // // // // // // // // // // // // // // // // // //           if(temp.left) stack.push(temp.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //           if(temp.right) stack.push(temp.right);
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //       };

// // // // // // // // // // // // // // // // // // // // // // // // // // /* 二叉树中序遍历非递归,也是利用栈 */

// // // // // // // // // // // // // // // // // // // // // // // // // // const fn = (tree) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //   let arr = [], res = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //   let p = tree;

// // // // // // // // // // // // // // // // // // // // // // // // // //   while( arr.length || p){
// // // // // // // // // // // // // // // // // // // // // // // // // //     while(p){
// // // // // // // // // // // // // // // // // // // // // // // // // //       arr.push(p.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //       p = p.left
// // // // // // // // // // // // // // // // // // // // // // // // // //     };
// // // // // // // // // // // // // // // // // // // // // // // // // //     let temp = arr.pop();
// // // // // // // // // // // // // // // // // // // // // // // // // //     res.push(temp.val);
// // // // // // // // // // // // // // // // // // // // // // // // // //     p = temp.right;
// // // // // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // // // //    return res;
// // // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // // /* 二叉树的广度优先遍历——利用队列 */
// // // // // // // // // // // // // // // // // // // // // // // // // // var levelOrder = function(root) {
// // // // // // // // // // // // // // // // // // // // // // // // // //   if(!root) return [];

// // // // // // // // // // // // // // // // // // // // // // // // // //    let res = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //    let queeue = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //    queeue.push(root);
// // // // // // // // // // // // // // // // // // // // // // // // // //    while(queeue.length){
// // // // // // // // // // // // // // // // // // // // // // // // // //      let count = queeue.length, newArr = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //      while(count > 0){
// // // // // // // // // // // // // // // // // // // // // // // // // //        let tempNode = queeue.shift(); 
// // // // // // // // // // // // // // // // // // // // // // // // // //       newArr.push(tempNode.val)
// // // // // // // // // // // // // // // // // // // // // // // // // //        if(tempNode.left) queeue.push(tempNode.left);
// // // // // // // // // // // // // // // // // // // // // // // // // //        if(tempNode.right) queeue.push(tempNode.right);

// // // // // // // // // // // // // // // // // // // // // // // // // //        count--;
// // // // // // // // // // // // // // // // // // // // // // // // // //      }
// // // // // // // // // // // // // // // // // // // // // // // // // //      res.push(newArr);
// // // // // // // // // // // // // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // // // // // // // // // // // // //    return res;
// // // // // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // // // // // // 删除链表倒数的节点
// // // // // // // // // // // // // // // // // // // // // // // // // // const removeNthFromEnd = function(head, n){
// // // // // // // // // // // // // // // // // // // // // // // // // //   let node = new ListNode(0);
// // // // // // // // // // // // // // // // // // // // // // // // // //   node.next = head;
// // // // // // // // // // // // // // // // // // // // // // // // // //   let first = node.next;
// // // // // // // // // // // // // // // // // // // // // // // // // //   let second = node.next;

// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // Function.prototype.myBind = function(that,...params01) {
// // // // // // // // // // // // // // // // // // // // // // // // // //     const fn = this;
// // // // // // // // // // // // // // // // // // // // // // // // // //     return function (...params02) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         return fn.call(that,[...params01,...params02])
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // 构造单例模式
// // // // // // // // // // // // // // // // // // // // // // // // // // function proxySingal(obj, ...params) {
// // // // // // // // // // // // // // // // // // // // // // // // // //     let instance = null;

// // // // // // // // // // // // // // // // // // // // // // // // // //     return (function name() {
// // // // // // // // // // // // // // // // // // // // // // // // // //       if(!instance) return new obj(params) 
// // // // // // // // // // // // // // // // // // // // // // // // // //       return instance;
// // // // // // // // // // // // // // // // // // // // // // // // // //     })()
// // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // const judge = (arr, nums) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //     arr.forEach( (item,index) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //         item.forEach( (item01,index) =>{
// // // // // // // // // // // // // // // // // // // // // // // // // //             if(item01 === nums){
// // // // // // // // // // // // // // // // // // // // // // // // // //                 index === 0 ? defaultNum = 0 : defaultNum =1;
// // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // //         })
// // // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // 有点难 是真点有的难
// // // // // // // // // // // // // // // // // // // // // // // // // // const fn = (NNnum, arr) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //     let defaultNum = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // //     const result = [];

// // // // // // // // // // // // // // // // // // // // // // // // // //     arr.forEach(element => {
// // // // // // // // // // // // // // // // // // // // // // // // // //         element.forEach( (item,index) =>{
// // // // // // // // // // // // // // // // // // // // // // // // // //             if(item === NNnum){
// // // // // // // // // // // // // // // // // // // // // // // // // //                 index === 0 ? defaultNum = 0 : defaultNum =1;
// // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // //         })
// // // // // // // // // // // // // // // // // // // // // // // // // //     });

// // // // // // // // // // // // // // // // // // // // // // // // // //     arr.forEach( (item,index) =>{
// // // // // // // // // // // // // // // // // // // // // // // // // //         result.push(index + defaultNum + 1)
// // // // // // // // // // // // // // // // // // // // // // // // // //     })

// // // // // // // // // // // // // // // // // // // // // // // // // //     return result
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(fn(4,[[1,2],[2,3],[4,3]]))


// // // // // // // // // // // // // // // // // // // // // // // // // // // 牛牛搞硬币
// // // // // // // // // // // // // // // // // // // // // // // // // // const getBiggist = (n, p, arr2N) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //     const bigP = p, smallP = 1 - p;
// // // // // // // // // // // // // // // // // // // // // // // // // //     const getSingleHope = (arr) => (Math.max(...arr) * bigP + Math.min(...arr) * smallP );

// // // // // // // // // // // // // // // // // // // // // // // // // //     const result = [];
// // // // // // // // // // // // // // // // // // // // // // // // // //     const fn = (arr, res) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //         if(arr.length < 2) return;

// // // // // // // // // // // // // // // // // // // // // // // // // //         for(let i=0; i<arr.length; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //             const newArr = [...arr]
// // // // // // // // // // // // // // // // // // // // // // // // // //             for(let j= i +1; j<arr.length; j++){
// // // // // // // // // // // // // // // // // // // // // // // // // //                 res.push([newArr[i],newArr[j]])
// // // // // // // // // // // // // // // // // // // // // // // // // //                 newArr.splice(i,1);
// // // // // // // // // // // // // // // // // // // // // // // // // //                 newArr.splice(j,1);
// // // // // // // // // // // // // // // // // // // // // // // // // //                 fn(newArr,res)
// // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //         result.push(res);
// // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // //     fn(arr2N,[])

// // // // // // // // // // // // // // // // // // // // // // // // // //     return result;
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // //console.log(getBiggist(1,0,[1,3,3,2,2,3]))

// // // // // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // // // // //     js每隔一秒打印一个数
// // // // // // // // // // // // // // // // // // // // // // // // // */
// // // // // // // // // // // // // // // // // // // // // // // // // // var arr = []
// // // // // // // // // // // // // // // // // // // // // // // // // //     var output = (i) => new Promise(res => {
// // // // // // // // // // // // // // // // // // // // // // // // // //       setTimeout(()=>{
// // // // // // // // // // // // // // // // // // // // // // // // // //         console.log(i)
// // // // // // // // // // // // // // // // // // // // // // // // // //         res()
// // // // // // // // // // // // // // // // // // // // // // // // // //       }, 1000*i)
// // // // // // // // // // // // // // // // // // // // // // // // // //     })

// // // // // // // // // // // // // // // // // // // // // // // // // //     for (var i=0; i<5; i++) {
// // // // // // // // // // // // // // // // // // // // // // // // // //       arr.push(output(i))
// // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // //     Promise.all(arr)

// // // // // // // // // // // // // // // // // // // // // // // // // // const arr = []
// // // // // // // // // // // // // // // // // // // // // // // // // // const fn = (val) => {
// // // // // // // // // // // // // // // // // // // // // // // // // //     return new Promise(resolve => {
// // // // // // // // // // // // // // // // // // // // // // // // // //         setTimeout( () =>{
// // // // // // // // // // // // // // // // // // // // // // // // // //             resolve()
// // // // // // // // // // // // // // // // // // // // // // // // // //             console.log(val)
// // // // // // // // // // // // // // // // // // // // // // // // // //         }, val * 1000)
// // // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // for(let i=0; i<5; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //     arr.push(fn(i))
// // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // /*   使用async和await实现   */

// // // // // // // // // // // // // // // // // // // // // // // // // // // const sleep = (val) => new Promise( resolve => {
// // // // // // // // // // // // // // // // // // // // // // // // // // //     setTimeout(() => {
// // // // // // // // // // // // // // // // // // // // // // // // // // //         resolve(val)
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }, 1000)    
// // // // // // // // // // // // // // // // // // // // // // // // // // // })
// // // // // // // // // // // // // // // // // // // // // // // // // // // (async function(){
// // // // // // // // // // // // // // // // // // // // // // // // // // //     for(let i = 0; i<5; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log(await sleep(i))
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // }())

// // // // // // // // // // // // // // // // // // // // // // // // // // const fun = () => new Promise(resolve => {
// // // // // // // // // // // // // // // // // // // // // // // // // //     setTimeout(() => resolve(), 1000)
// // // // // // // // // // // // // // // // // // // // // // // // // // })

// // // // // // // // // // // // // // // // // // // // // // // // // // (async function(){
// // // // // // // // // // // // // // // // // // // // // // // // // //     for(let i= 0; i<5; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         await fun()
// // // // // // // // // // // // // // // // // // // // // // // // // //         console.log(i);
// // // // // // // // // // // // // // // // // // // // // // // // // //         console.log("i:")
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // }())

// // // // // // // // // // // // // // // // // // // // // // // // // // 实现一个promise
// // // // // // // // // // // // // // // // // // // // // // // // // class myPromise01 {
// // // // // // // // // // // // // // // // // // // // // // // // //     constructor(excutor) {
// // // // // // // // // // // // // // // // // // // // // // // // //         this.state = "pending";
// // // // // // // // // // // // // // // // // // // // // // // // //         this.value = null;
// // // // // // // // // // // // // // // // // // // // // // // // //         this.failedReason = null;
// // // // // // // // // // // // // // // // // // // // // // // // //         this.success = [];
// // // // // // // // // // // // // // // // // // // // // // // // //         this.failed = [];
// // // // // // // // // // // // // // // // // // // // // // // // //         try {
// // // // // // // // // // // // // // // // // // // // // // // // //             excutor(this.resolve, this.reject)
// // // // // // // // // // // // // // // // // // // // // // // // //         } catch (err) {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.failedReason = err;
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // //     resolve = (res) => {
// // // // // // // // // // // // // // // // // // // // // // // // //         this.value = res;
// // // // // // // // // // // // // // // // // // // // // // // // //         setTimeout(() => this.success.forEach(fn => fn(res)), 0)
// // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // //     reject = (err) => {
// // // // // // // // // // // // // // // // // // // // // // // // //         setTimeout(() => this.failed.forEach(fn => fn(err)), 0)
// // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // myPromise01.prototype.then = function (cb) {
// // // // // // // // // // // // // // // // // // // // // // // // //     return new myPromise((resolve, reject) => {
// // // // // // // // // // // // // // // // // // // // // // // // //         this.success.push((vale) => {
// // // // // // // // // // // // // // // // // // // // // // // // //             const result = cb(vale);
// // // // // // // // // // // // // // // // // // // // // // // // //             resolve(result);
// // // // // // // // // // // // // // // // // // // // // // // // //         });
// // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // 利用状态机去实现一个promise
// // // // // // // // // // // // // // // // // // // // // // // // // class myPromise02 {
// // // // // // // // // // // // // // // // // // // // // // // // //     constructor(excutor) {
// // // // // // // // // // // // // // // // // // // // // // // // //         this.state = "pending";
// // // // // // // // // // // // // // // // // // // // // // // // //         this.value = null;
// // // // // // // // // // // // // // // // // // // // // // // // //         this.err = null;
// // // // // // // // // // // // // // // // // // // // // // // // //         this.success = [];
// // // // // // // // // // // // // // // // // // // // // // // // //         this.failed = [];
// // // // // // // // // // // // // // // // // // // // // // // // //         excutor(this.resolve, this.reject)
// // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // //     resolve = (res) => {
// // // // // // // // // // // // // // // // // // // // // // // // //         this.value = res;

// // // // // // // // // // // // // // // // // // // // // // // // //         if (this.state === "pending") {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.state = "fulilled";
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //         // 这里才是防止异步的情况
// // // // // // // // // // // // // // // // // // // // // // // // //         if (this.state === "fulilled") {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.success.forEach(fn => {
// // // // // // // // // // // // // // // // // // // // // // // // //                 fn(this.value)
// // // // // // // // // // // // // // // // // // // // // // // // //             })
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // //     reject = (err) => {
// // // // // // // // // // // // // // // // // // // // // // // // //         if (this.state === "reject") {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.err = err;
// // // // // // // // // // // // // // // // // // // // // // // // //             this.failed.forEach(fn => fn(this.err))
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //         if (this.state === "pending") {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.state = "reject";
// // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // //     }


// // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // myPromise02.prototype.then = function (cb) {
// // // // // // // // // // // // // // // // // // // // // // // // //     return new myPromise02(resolve => {

// // // // // // // // // // // // // // // // // // // // // // // // //         // 如果异步的话则直接添加进来
// // // // // // // // // // // // // // // // // // // // // // // // //         this.success.push(() => {
// // // // // // // // // // // // // // // // // // // // // // // // //             const result = cb(this.value);
// // // // // // // // // // // // // // // // // // // // // // // // //             resolve(result)
// // // // // // // // // // // // // // // // // // // // // // // // //         })
// // // // // // // // // // // // // // // // // // // // // // // // //         // 非异步
// // // // // // // // // // // // // // // // // // // // // // // // //         if (this.state == "fulilled") {
// // // // // // // // // // // // // // // // // // // // // // // // //             this.success.forEach(fn => {
// // // // // // // // // // // // // // // // // // // // // // // // //                 fn(this.value)
// // // // // // // // // // // // // // // // // // // // // // // // //             })
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // // new myPromise02((resolve, reject) => {

// // // // // // // // // // // // // // // // // // // // // // // // //         setTimeout(() => resolve("这个答案很special"), 1000)


// // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // //     .then(res => {
// // // // // // // // // // // // // // // // // // // // // // // // //         console.log("我拿到了第一个答案", res);
// // // // // // // // // // // // // // // // // // // // // // // // //         return "super special offer"
// // // // // // // // // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // // // // // // // // // //  .then( res => {console.log("我拿到了第二个答案",res)})


// // // // // // // // // // // // // // // // // // // // // // // // function TreeNode(val) {
// // // // // // // // // // // // // // // // // // // // // // // //     this.val = val;
// // // // // // // // // // // // // // // // // // // // // // // //     this.left = this.right = null;
// // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // var buildTree = function(preorder, inorder) {
// // // // // // // // // // // // // // // // // // // // // // // // const root = new TreeNode(null);


// // // // // // // // // // // // // // // // // // // // // // // // const fn = (preArr, inArr, tree) => {

// // // // // // // // // // // // // // // // // // // // // // // //    if(!preArr[0] || inArr.lenght === 0) return;

// // // // // // // // // // // // // // // // // // // // // // // //    const centerItem = preArr[0];
// // // // // // // // // // // // // // // // // // // // // // // //    const pIndex = inArr.indexOf(centerItem);
// // // // // // // // // // // // // // // // // // // // // // // //    if(tree === null){
// // // // // // // // // // // // // // // // // // // // // // // //        tree = new TreeNode(centerItem)
// // // // // // // // // // // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // // // // // // // // // // //    const inLeftTreeFirst = 0;
// // // // // // // // // // // // // // // // // // // // // // // //    const inLeftTreeLast = pIndex -1 +1; // +1 是因为slice截取问题
// // // // // // // // // // // // // // // // // // // // // // // //    const inRightTreeFirst = pIndex +1;
// // // // // // // // // // // // // // // // // // // // // // // //    const inRightTreeLast = inArr.lenght;

// // // // // // // // // // // // // // // // // // // // // // // //    const preLeftTreeFirst = 1;
// // // // // // // // // // // // // // // // // // // // // // // //    const preLeftTreeLast = preLeftTreeFirst + inLeftTreeLast - inLeftTreeFirst;
// // // // // // // // // // // // // // // // // // // // // // // //    const preRightTreeFirst =  pIndex + 1;
// // // // // // // // // // // // // // // // // // // // // // // //    const preRightTreeLast = preArr.lenght;
// // // // // // // // // // // // // // // // // // // // // // // //    // 左子树
// // // // // // // // // // // // // // // // // // // // // // // //    fn(preArr.slice(preLeftTreeFirst, preLeftTreeLast),inArr.slice(inLeftTreeFirst, inLeftTreeLast) ,tree.left)

// // // // // // // // // // // // // // // // // // // // // // // //    // 右子树
// // // // // // // // // // // // // // // // // // // // // // // //    fn(preArr.slice(preRightTreeFirst, preRightTreeLast), inArr.slice(inRightTreeFirst, inRightTreeLast),tree.right)

// // // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // // fn(preorder, inorder, root)

// // // // // // // // // // // // // // // // // // // // // // // // return root;
// // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // const pre = [3,9,20,15,7]
// // // // // // // // // // // // // // // // // // // // // // // // const middle = [9,3,15,20,7]

// // // // // // // // // // // // // // // // // // // // // // // // console.log(buildTree(pre,middle))

// // // // // // // // // // // // // // // // // // // // // // // // 每月少一天
// // // // // // // // // // // // // // // // // // // // // // // let str = "2020 8 10 3 2020 8 11";
// // // // // // // // // // // // // // // // // // // // // // // const getThisYearDays = thisYear => {
// // // // // // // // // // // // // // // // // // // // // // //     if( thisYear%4 === 0){
// // // // // // // // // // // // // // // // // // // // // // //         return 354
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // //     return 453
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // const getTodayOfThisYear = (year, month, days) => {
// // // // // // // // // // // // // // // // // // // // // // //     let res  = 0;
// // // // // // // // // // // // // // // // // // // // // // //     const months ={
// // // // // // // // // // // // // // // // // // // // // // //         1: 30,
// // // // // // // // // // // // // // // // // // // // // // //         2: year%4 === 0 ? 28 :27,
// // // // // // // // // // // // // // // // // // // // // // //         3: 30,
// // // // // // // // // // // // // // // // // // // // // // //         4: 29,
// // // // // // // // // // // // // // // // // // // // // // //         5: 30,
// // // // // // // // // // // // // // // // // // // // // // //         6: 29,
// // // // // // // // // // // // // // // // // // // // // // //         7: 30,
// // // // // // // // // // // // // // // // // // // // // // //         8: 30,
// // // // // // // // // // // // // // // // // // // // // // //         9: 29,
// // // // // // // // // // // // // // // // // // // // // // //         10: 30,
// // // // // // // // // // // // // // // // // // // // // // //         11: 29,
// // // // // // // // // // // // // // // // // // // // // // //         12: 30,
// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // //     const arr = Object.keys(months);

// // // // // // // // // // // // // // // // // // // // // // //     for(let i =0; i<arr.length; i++ ){
// // // // // // // // // // // // // // // // // // // // // // //         const key = i +1;
// // // // // // // // // // // // // // // // // // // // // // //         if( month === key) {
// // // // // // // // // // // // // // // // // // // // // // //             return res + (days - 0)
// // // // // // // // // // // // // // // // // // // // // // //         };
// // // // // // // // // // // // // // // // // // // // // // //         res= res + months[key];
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // const deal = (week , howFar) => {
// // // // // // // // // // // // // // // // // // // // // // //     let temp = howFar%7;
// // // // // // // // // // // // // // // // // // // // // // //     if((temp + week) > 7) return (temp+ week) -7;
// // // // // // // // // // // // // // // // // // // // // // //     else {
// // // // // // // // // // // // // // // // // // // // // // //         return temp + week
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // const fn = (year,month, days, sunDays, hopeYear, hopeMonth, hopeDay) => {
// // // // // // // // // // // // // // // // // // // // // // //     const wholeYear = 365  - 12;
// // // // // // // // // // // // // // // // // // // // // // //     if(year === hopeYear){
// // // // // // // // // // // // // // // // // // // // // // //         return deal(sunDays
// // // // // // // // // // // // // // // // // // // // // // //             ,Math.abs(getTodayOfThisYear(year, month, days) - getTodayOfThisYear(hopeYear, hopeMonth, hopeDay))
// // // // // // // // // // // // // // // // // // // // // // //             )
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         const currRestDays = getThisYearDays(year) - getTodayOfThisYear(year, month, days);
// // // // // // // // // // // // // // // // // // // // // // //         if(Math.abs(year -hopeYear) ===1){
// // // // // // // // // // // // // // // // // // // // // // //             console.log(sunDays,
// // // // // // // // // // // // // // // // // // // // // // //                 currRestDays + getTodayOfThisYear(hopeYear, hopeMonth, hopeDay))
// // // // // // // // // // // // // // // // // // // // // // //             deal(sunDays,
// // // // // // // // // // // // // // // // // // // // // // //                 currRestDays + getTodayOfThisYear(hopeYear, hopeMonth, hopeDay))
// // // // // // // // // // // // // // // // // // // // // // //         }



// // // // // // // // // // // // // // // // // // // // // // //     let min = Math.min(year, hopeYear)+1 , max = Math.max(year, hopeYear), sum = 0;
// // // // // // // // // // // // // // // // // // // // // // //     while(max > min){
// // // // // // // // // // // // // // // // // // // // // // //         sum = getThisYearDays(min);
// // // // // // // // // // // // // // // // // // // // // // //         console.log("sum:",sum)
// // // // // // // // // // // // // // // // // // // // // // //         min++
// // // // // // // // // // // // // // // // // // // // // // //     };

// // // // // // // // // // // // // // // // // // // // // // //     sum = currRestDays + sum + getTodayOfThisYear(hopeYear, hopeMonth, hopeDay)

// // // // // // // // // // // // // // // // // // // // // // //     return deal(sunDays, sum%7)
// // // // // // // // // // // // // // // // // // // // // // // }



// // // // // // // // // // // // // // // // // // // // // // // console.log(fn(2020,8,10,3,2021,8,10)) // 这里返回应该是周六啊 365 -12 

// // // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // // //     简单去整理一下useState，

// // // // // // // // // // // // // // // // // // // // // // // */
// // // // // // // // // // // // // // // // // // // // // // // let _state = null;
// // // // // // // // // // // // // // // // // // // // // // // function useState(initialValue) {
// // // // // // // // // // // // // // // // // // // // // // //     let _state =_state || initialValue
// // // // // // // // // // // // // // // // // // // // // // //     function dispatch(newState) {
// // // // // // // // // // // // // // // // // // // // // // //         _state = newState
// // // // // // // // // // // // // // // // // // // // // // //         render(<App />, document.getElementById('root'))
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // //     return [_state, dispatch]
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // //

// // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // // const judge = (s, index01, index02) => {


// // // // // // // // // // // // // // // // // // // // // //     let count = 0;
// // // // // // // // // // // // // // // // // // // // // //     let left = index01;
// // // // // // // // // // // // // // // // // // // // // //     let right = index02;
// // // // // // // // // // // // // // // // // // // // // //     while(left >=0 && right< s.length){
// // // // // // // // // // // // // // // // // // // // // //         if(s[left] === s[right]){
// // // // // // // // // // // // // // // // // // // // // //           count++;
// // // // // // // // // // // // // // // // // // // // // //           left--;
// // // // // // // // // // // // // // // // // // // // // //           right++;
// // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // //         else break;
// // // // // // // // // // // // // // // // // // // // // //       }


// // // // // // // // // // // // // // // // // // // // // //     return count;
// // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // */
// // // // // // // // // // // // // // // // // // // // // // // const judge = (s, index01, index02) => {

// // // // // // // // // // // // // // // // // // // // // // //     let count = 0;
// // // // // // // // // // // // // // // // // // // // // // // let left = index01;
// // // // // // // // // // // // // // // // // // // // // // // let right = index02;

// // // // // // // // // // // // // // // // // // // // // // // while(left >=0 && right< s.length && s[left] === s[right]){
// // // // // // // // // // // // // // // // // // // // // // //       count++;
// // // // // // // // // // // // // // // // // // // // // // //       left--;
// // // // // // // // // // // // // // // // // // // // // // //       right++;
// // // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // // // return count;
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // var longestPalindrome = function(s) {
// // // // // // // // // // // // // // // // // // // // // // // if(!s) return;

// // // // // // // // // // // // // // // // // // // // // // // let maxLength = 0, start = 0;

// // // // // // // // // // // // // // // // // // // // // // // const length = s.length;

// // // // // // // // // // // // // // // // // // // // // // // for(let i=0; i<length; i++){

// // // // // // // // // // // // // // // // // // // // // // //     const temp01 = judge(s,i,i);
// // // // // // // // // // // // // // // // // // // // // // //     const temp02 = judge(s,i, i+1)

// // // // // // // // // // // // // // // // // // // // // // //     const temp  = Math.max(temp01, temp02)
// // // // // // // // // // // // // // // // // // // // // // //     if(maxLength < temp){
// // // // // // // // // // // // // // // // // // // // // // //         console.log(i,Math.ceil(temp/2), temp)
// // // // // // // // // // // // // // // // // // // // // // //         start =  Math.abs(i - Math.ceil(temp/2));   // 回文子串的启始位置
// // // // // // // // // // // // // // // // // // // // // // //         maxLength= temp;
// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // // // console.log("start:",start,"maxLength:",maxLength)


// // // // // // // // // // // // // // // // // // // // // // // return s.slice(start,start+ maxLength +1); //这里需要加个1因为slice这个api 是截取最后一项前面的
// // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // //   console.log(longestPalindrome("babad"))


// // // // // // // // // // // // // // // // // // // // // // /*
// // // // // // // // // // // // // // // // // // // // // //   注意这里要考虑一种 bb 双字母的特殊情况

// // // // // // // // // // // // // // // // // // // // // // */
// // // // // // // // // // // // // // // // // // // // // // var findRepeatNumber = function(nums) {
// // // // // // // // // // // // // // // // // // // // // //   const hashMap = {};
// // // // // // // // // // // // // // // // // // // // // //   for(let i=0; i<nums.length; i++){
// // // // // // // // // // // // // // // // // // // // // //       const item = nums[i];
// // // // // // // // // // // // // // // // // // // // // //       if(hashMap[item]) return item;
// // // // // // // // // // // // // // // // // // // // // //       hashMap[item] = true;

// // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // // // // // // // //  * @param {number[]} nums
// // // // // // // // // // // // // // // // // // // // // //  * @return {number}
// // // // // // // // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // // // // // // // var singleNumber = function(nums) {
// // // // // // // // // // // // // // // // // // // // // //   let ans = 0;
// // // // // // // // // // // // // // // // // // // // // //   for(const num of nums) {
// // // // // // // // // // // // // // // // // // // // // //       ans ^= num;
// // // // // // // // // // // // // // // // // // // // // //       console.log(ans)
// // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // //   return ans;
// // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // var singleNumbers = function(nums) {
// // // // // // // // // // // // // // // // // // // // // //   let temp = 0, a=0 ,b=0;
// // // // // // // // // // // // // // // // // // // // // //   // 这个temp是在寻找 位数不一样的地方
// // // // // // // // // // // // // // // // // // // // // //   for(const item of nums){
// // // // // // // // // // // // // // // // // // // // // //       temp = temp ^ item;
// // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // //   let mask = 1;
// // // // // // // // // // // // // // // // // // // // // //   // 然后我们取出一位位数不一样的就可以了 可以在草稿纸上写一下 如果为0的为证明 这位是相同的
// // // // // // // // // // // // // // // // // // // // // //   while(mask & temp == 0){
// // // // // // // // // // // // // // // // // // // // // //       mask <<=1
// // // // // // // // // // // // // // // // // // // // // //   };

// // // // // // // // // // // // // // // // // // // // // //   // 然后我们根据位数相同与否 分为两组 一直做异或运算即可
// // // // // // // // // // // // // // // // // // // // // //   for(const item of nums){
// // // // // // // // // // // // // // // // // // // // // //       if(item & mask){
// // // // // // // // // // // // // // // // // // // // // //           a = item ^ a;
// // // // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // // // //       else{
// // // // // // // // // // // // // // // // // // // // // //           b = item ^ b;
// // // // // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // // //   return [a,b]
// // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // let a = [43,63,2,5,98,43,1];

// // // // // // // // // // // // // // // // // // // // // // const quickSort = (arr) => {
// // // // // // // // // // // // // // // // // // // // // //   if(arr.length === 0 ) return [];

// // // // // // // // // // // // // // // // // // // // // //   const middleInex = 0;
// // // // // // // // // // // // // // // // // // // // // //   const middleValue  = arr[middleInex];
// // // // // // // // // // // // // // // // // // // // // //   const left = [], right = [], middle = [];

// // // // // // // // // // // // // // // // // // // // // //   arr.forEach( item => {
// // // // // // // // // // // // // // // // // // // // // //     if(item > middleValue){
// // // // // // // // // // // // // // // // // // // // // //       left.push(item);
// // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // //     else if(item === middleValue){
// // // // // // // // // // // // // // // // // // // // // //       middle.push(item)
// // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // //     else if(item < middleValue){
// // // // // // // // // // // // // // // // // // // // // //       right.push(item);
// // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // //   })

// // // // // // // // // // // // // // // // // // // // // //   return [...quickSort(left),...middle, ...quickSort(right)];
// // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // Function.prototype.myBind = function(obj,...arg){
// // // // // // // // // // // // // // // // // // // // // //   const that = this;

// // // // // // // // // // // // // // // // // // // // // //   return function(...arg01){
// // // // // // // // // // // // // // // // // // // // // //     that.apply(obj,[...arg, arg01])
// // // // // // // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // 手写函数克里化
// // // // // // // // // // // // // // // // // // // // // function ke(fn,...params){
// // // // // // // // // // // // // // // // // // // // //   const length = fn.length;
// // // // // // // // // // // // // // // // // // // // //   const paramsArr = [...params];
// // // // // // // // // // // // // // // // // // // // //   const that = this;


// // // // // // // // // // // // // // // // // // // // //    function temp(...otherParams){
// // // // // // // // // // // // // // // // // // // // //     paramsArr.push(...otherParams);

// // // // // // // // // // // // // // // // // // // // //     console.log("paramsArr:",paramsArr)
// // // // // // // // // // // // // // // // // // // // //       if(length == paramsArr.length){
// // // // // // // // // // // // // // // // // // // // //         return fn.apply(that,paramsArr);
// // // // // // // // // // // // // // // // // // // // //       }



// // // // // // // // // // // // // // // // // // // // //           return temp;
// // // // // // // // // // // // // // // // // // // // //   }

// // // // // // // // // // // // // // // // // // // // //   return temp;
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // function test(a,b,c){
// // // // // // // // // // // // // // // // // // // // //   console.log("a is ",a,b,c)
// // // // // // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // // // // // k =ke(test, 1);
// // // // // // // // // // // // // // // // // // // // // k(2,3)

// // // // // // // // // // // // // // // // // // // // // var text = '亲爱的#customer#，您已成功购买了#brand#的商品，订单编号为#order#，请凭订单编号或⼿机号⾄商家处消费！#url# 请保留此短信，及时查看消费情况哦！'
// // // // // // // // // // // // // // // // // // // // // var regex=/\#(.+?)\#/g;
// // // // // // // // // // // // // // // // // // // // // var result;
// // // // // // // // // // // // // // // // // // // // // while((result=regex.exec(text))!=null) {
// // // // // // // // // // // // // // // // // // // // //   console.log(result[1]);
// // // // // // // // // // // // // // // // // // // // //   console.log("!!!!!!!!!!!!!!!!!!!!!!!!!")
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // let str = "[object String]";
// // // // // // // // // // // // // // // // // // // // console.log(Object.prototype.toString.call("dsf"))
// // // // // // // // // // // // // // // // // // // // const testReg = /(?<=\s)(.+?)(?=])/g;
// // // // // // // // // // // // // // // // // // // // let res;


// // // // // // // // // // // // // // // // // // // // console.log(str.match(testReg))
// // // // // // // // // // // // // // // // // // //     // let  prices = [7,1,5,3,6,4];
// // // // // // // // // // // // // // // // // // //     // let length = prices.length;
// // // // // // // // // // // // // // // // // // //     // let dp  = new Array(prices.length).fill([]);

// // // // // // // // // // // // // // // // // // //     // dp[0][0] = 0;
// // // // // // // // // // // // // // // // // // //     // dp[0][1] = -7;
// // // // // // // // // // // // // // // // // // //     // console.log(dp[0])

// // // // // // // // // // // // // // // // // // //     // console.log(dp)
// // // // // // // // // // // // // // // // // // //     this.a = 1;
// // // // // // // // // // // // // // // // // // //     var obj = {
// // // // // // // // // // // // // // // // // // //         a:"I am sb",
// // // // // // // // // // // // // // // // // // //         handleFn:function(){
// // // // // // // // // // // // // // // // // // //             // let self = this;
// // // // // // // // // // // // // // // // // // //             console.log(this)
// // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // //     // obj.handleFn()
// // // // // // // // // // // // // // // // // // //      fn = () =>{
// // // // // // // // // // // // // // // // // // //         console.log(this)
// // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // //     setTimeout(function(){
// // // // // // // // // // // // // // // // // // //         // console.log(this.a)
// // // // // // // // // // // // // // // // // // //         // obj.handleFn()
// // // // // // // // // // // // // // // // // // //     },100)
// // // // // // // // // // // // // // // // // // //     fn();

// // // // // // // // // // // // // // // // // // //     // console.log(this)


// // // // // // // // // // // // // // // // // //    let obj = {
// // // // // // // // // // // // // // // // // //        a: {
// // // // // // // // // // // // // // // // // //            name:"1",
// // // // // // // // // // // // // // // // // //        },
// // // // // // // // // // // // // // // // // //        arr:[1,2,3],
// // // // // // // // // // // // // // // // // //        fn: function(){
// // // // // // // // // // // // // // // // // //            console.log("不知道说什么")
// // // // // // // // // // // // // // // // // //        },

// // // // // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // // // // //   //  obj.test = obj

// // // // // // // // // // // // // // // // // //   //  const newObj = deepClone(obj)
// // // // // // // // // // // // // // // // // //   //  obj.a.name = "66"
// // // // // // // // // // // // // // // // // //   //  obj.arr = "77"
// // // // // // // // // // // // // // // // // //   //  obj.arr = [333]
// // // // // // // // // // // // // // // // // //   //  obj.fn = [333]
// // // // // // // // // // // // // // // // // //   //  console.log(newObj)
// // // // // // // // // // // // // // // // // //   //  console.log(obj)
// // // // // // // // // // // // // // // // // //   //  console.log(Object.prototype.toString.call(newObj))

// // // // // // // // // // // // // // // // // //   // let date = new Date();
// // // // // // // // // // // // // // // // // //   // let a= deepClone01(date)
// // // // // // // // // // // // // // // // // //   // date = "11"

// // // // // // // // // // // // // // // // // //    class MyPromise
// // // // // // // // // // // // // // // // // //    {

// // // // // // // // // // // // // // // // // //      constructor(excutor){
// // // // // // // // // // // // // // // // // //         this.resolveArr = [];
// // // // // // // // // // // // // // // // // //         this.rejectArr = [];


// // // // // // // // // // // // // // // // // //       excutor(this.resolve,this.reject)                
// // // // // // // // // // // // // // // // // //      }

// // // // // // // // // // // // // // // // // //      resolve = (res) => {
// // // // // // // // // // // // // // // // // //       setTimeout(() => {
// // // // // // // // // // // // // // // // // //          this.resolveArr.forEach(callBack =>  callBack(res))
// // // // // // // // // // // // // // // // // //       })

// // // // // // // // // // // // // // // // // //      }

// // // // // // // // // // // // // // // // // //      then = (callBack) =>{
// // // // // // // // // // // // // // // // // //           this.resolveArr.push(
// // // // // // // // // // // // // // // // // //           callBack(this.resolve,this.reject) 
// // // // // // // // // // // // // // // // // //        )

// // // // // // // // // // // // // // // // // //      }


// // // // // // // // // // // // // // // // // //      reject(err){

// // // // // // // // // // // // // // // // // //      }

// // // // // // // // // // // // // // // // // //      catach(){

// // // // // // // // // // // // // // // // // //      }

// // // // // // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // // // // //   //  let a = new MyPromise(1);

// // // // // // // // // // // // // // // // // //   // let a=   new MyPromise((resolve,reject) => {
// // // // // // // // // // // // // // // // // //   //    console.log("MyPromise里");
// // // // // // // // // // // // // // // // // //   //   setTimeout(()=>{
// // // // // // // // // // // // // // // // // //   //     resolve("I am SB")
// // // // // // // // // // // // // // // // // //   //   },1000)
// // // // // // // // // // // // // // // // // //   //  })
// // // // // // // // // // // // // // // // // //   //  a.then(res => console.log(`then的返回值:${res}`))
// // // // // // // // // // // // // // // // // // // arrIndex返回时基数相加
// // // // // // // // // // // // // // // // // // async function myPromiseAll(promiseArr){
// // // // // // // // // // // // // // // // // //   let count = 0;
// // // // // // // // // // // // // // // // // //   const length = promiseArr.length, result = [];
// // // // // // // // // // // // // // // // // //   promiseArr.forEach(promise => {
// // // // // // // // // // // // // // // // // //     promise.then(res => {
// // // // // // // // // // // // // // // // // //       count++;
// // // // // // // // // // // // // // // // // //       result.push(res)
// // // // // // // // // // // // // // // // // //       if(length == count) return result;
// // // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // // //   })
// // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // let url = "http://www.baidu.com?name=elephant&age=25&sex=male&num=100"
// // // // // // // // // // // // // // // // // // //  let pattern = /(\w+)=(\w+)/ig; //定义正则表达式
// // // // // // // // // // // // // // // // // // let reg = /(\w+)=(\w+)/gi;
// // // // // // // // // // // // // // // // // //  let parames = {}; // 定义参数对象
// // // // // // // // // // // // // // // // // //     url.replace(reg, ($, $1, $2) => {
// // // // // // // // // // // // // // // // // //       console.log($)
// // // // // // // // // // // // // // // // // //       console.log($1)
// // // // // // // // // // // // // // // // // //       console.log($2)
// // // // // // // // // // // // // // // // // //       parames[$1] = $2;
// // // // // // // // // // // // // // // // // //     });
// // // // // // // // // // // // // // // // // //     console.log(parames);

// // // // // // // // // // // // // // // // // function throttle(callBack,milleconds){
// // // // // // // // // // // // // // // // //   let timer = null;
// // // // // // // // // // // // // // // // //   return function(...arg){
// // // // // // // // // // // // // // // // //     let that = this;
// // // // // // // // // // // // // // // // //     if(!timer){
// // // // // // // // // // // // // // // // //       timer = setTimeout(() => {
// // // // // // // // // // // // // // // // //         timer = null;
// // // // // // // // // // // // // // // // //         callBack.call(that,...arg)
// // // // // // // // // // // // // // // // //       },milleconds)
// // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // function debounce(callback,milleconds = 1000){
// // // // // // // // // // // // // // // // //   let timer = null;
// // // // // // // // // // // // // // // // //   return function(...arg){
// // // // // // // // // // // // // // // // //     if(timer) clearTimeout(timer)
// // // // // // // // // // // // // // // // //     timer = setTimeout(() => {
// // // // // // // // // // // // // // // // //       callback(...arg),milleconds
// // // // // // // // // // // // // // // // //     })
// // // // // // // // // // // // // // // // //   }
// // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // const test = () => {
// // // // // // // // // // // // // // // // //     console.log(111);
// // // // // // // // // // // // // // // // // }
// // // // // // // // // // // // // // // // // const fn = debounce(test,1000);

// // // // // // // // // // // // // // // // // setInterval(fn,900)

// // // // // // // // // // // // // // // // let set  =  new Set();
// // // // // // // // // // // // // // // // set.add(1)

// // // // // // // // // // // // // // // // console.log(set[0])

// // // // // // // // // // // // // // // // class Single{
// // // // // // // // // // // // // // // //     constructor(a){
// // // // // // // // // // // // // // // //         this.a = a;
// // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // Single.getInsance = (function(){
// // // // // // // // // // // // // // // //     let instance;
// // // // // // // // // // // // // // // //     return function(arg){
// // // // // // // // // // // // // // // //         if(!instance){
// // // // // // // // // // // // // // // //             if(arg) instance = new Single(arg)
// // // // // // // // // // // // // // // //             else instance = new Single("sb")

// // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // //         return instance;
// // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // })();

// // // // // // // // // // // // // // // // let a = Single.getInsance(1);
// // // // // // // // // // // // // // // // let b = Single.getInsance(2);
// // // // // // // // // // // // // // // // console.log(b);

// // // // // // // // // // // // // // // // const myPromise = new Promise((resolve,reject) => {
// // // // // // // // // // // // // // // //     resolve(1)
// // // // // // // // // // // // // // // // })

// // // // // // // // // // // // // // // // myPromise.then(res => {console.log(res)
// // // // // // // // // // // // // // // //     return 2
// // // // // // // // // // // // // // // // }).then(res01 => console.log(res01))


// // // // // // // // // // // // // // // const arr = ['0.11.1','0.11.1', '2.3.3', '0.302.1','0.23','0.31.1','0.301.1', '4.2', '4.3.5', '4.3.4.5'];

// // // // // // // // // // // // // // // const myFn = (ary) =>{

// // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // arr.sort((a,b) => {

// // // // // // // // // // // // // // //     let arr01 = a.split("."),arr02 = b.split(".");
// // // // // // // // // // // // // // //     let i = 0;
// // // // // // // // // // // // // // //     while(true){
// // // // // // // // // // // // // // //         let str01 = arr01[i], str02 = arr02[i];
// // // // // // // // // // // // // // //         i++;

// // // // // // // // // // // // // // //         if(str02 === undefined || str01 === undefined){
// // // // // // // // // // // // // // //             console.log("执行")
// // // // // // // // // // // // // // //             return arr01.length <  arr02.length ? 1 : -1; 
// // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // //         if(str01 == str02) continue;



// // // // // // // // // // // // // // //         return str02 - str01;
// // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // })


// // // // // // // // // // // // // // // // arr.sort((a, b) => {
// // // // // // // // // // // // // // // //     let i = 0;
// // // // // // // // // // // // // // // //     const arr1 = a.split('.');
// // // // // // // // // // // // // // // //     const arr2 = b.split('.');

// // // // // // // // // // // // // // // //     while (true) {
// // // // // // // // // // // // // // // //         const s1 = arr1[i];
// // // // // // // // // // // // // // // //         const s2 = arr2[i];
// // // // // // // // // // // // // // // //         console.log(s2,s1)
// // // // // // // // // // // // // // // //         i++
// // // // // // // // // // // // // // // //         // console.log(s1,s2,arr2[1],i)
// // // // // // // // // // // // // // // //         // break

// // // // // // // // // // // // // // // //         if (s1 === undefined || s2 === undefined) {
// // // // // // // // // // // // // // // //             return arr2.length - arr1.length;
// // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // //         if (s1 === s2) continue;

// // // // // // // // // // // // // // // //         return s2 - s1;
// // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // });

// // // // // // // // // // // // // // // console.log(arr)

// // // // // // // // // // // // // // // // console.log(typeof ("302" - 0))













// // // // // // // // // // // // // // let lightRang = [230,70,20,70];
// // // // // // // // // // // // // // let lightNum = 4;
// // // // // // // // // // // // // // const sumRange = 100 * (lightNum -1);
// // // // // // // // // // // // // // let sumNotLight = 0;
// // // // // // // // // // // // // // // const arr = new Array(lightNum).fill()


// // // // // // // // // // // // // // let moreFar = 0;

// // // // // // // // // // // // // // for(let i =0; i<lightRang.length;i++){
// // // // // // // // // // // // // //     const item = parseInt(lightRang[i]) ;
// // // // // // // // // // // // // //       if(i+1 >= lightRang.length) {
// // // // // // // // // // // // // //          console.log(sumNotLight);
// // // // // // // // // // // // // //          break
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // //     let nextHalfLight = lightRang[i+1];
// // // // // // // // // // // // // //     // 如果路灯距离大于下一个路灯
// // // // // // // // // // // // // //     if(item > 100){
// // // // // // // // // // // // // //         const index = Math.floor(item /100)

// // // // // // // // // // // // // //          moreFar = item % 100;
// // // // // // // // // // // // // //         i = index ;

// // // // // // // // // // // // // //     if(i+1 >= lightRang.length) {
// // // // // // // // // // // // // //          console.log(sumNotLight);
// // // // // // // // // // // // // //          break
// // // // // // // // // // // // // //     }

// // // // // // // // // // // // // //         if(moreFar < lightRang[i]) moreFar = lightRang[i];
// // // // // // // // // // // // // //         const temp = 100 - moreFar - lightRang[i+1];
// // // // // // // // // // // // // //             temp > 0 ? sumNotLight = sumNotLight + temp : "";

// // // // // // // // // // // // // //     }else{
// // // // // // // // // // // // // //     const temp = 100 - item - nextHalfLight;
// // // // // // // // // // // // // //     temp > 0 ? sumNotLight = sumNotLight + temp : "";
// // // // // // // // // // // // // //     }


// // // // // // // // // // // // // //     moreFar = 0;
// // // // // // // // // // // // // // }
// // // // // // // // // // // // // // //  console.log(sumNotLight);


// // // // // // // // // // // // // // let str = ""

// // // // // // // // // // // // // // const matchStrArr = str.match(/(\d{0,},\d{0,})/g);
// // // // // // // // // // // // // // // console.log(matchStr);
// // // // // // // // // // // // // // const newArr = [];
// // // // // // // // // // // // // // let finalArr = [0,0]
// // // // // // // // // // // // // // console.log(matchStrArr)
// // // // // // // // // // // // // // matchStrArr.forEach(item => {
// // // // // // // // // // // // // //     const tempArr = item.split(",")
// // // // // // // // // // // // // //     let a = tempArr[0];
// // // // // // // // // // // // // //     let b = tempArr[1];

// // // // // // // // // // // // // //     if( a != "0" && b !="0" &&  a.replace(/^0{0,}/,"").length == a.length){
// // // // // // // // // // // // // //         a = parseInt(a);
// // // // // // // // // // // // // //         b = parseInt(b);
// // // // // // // // // // // // // //         if((a*a + b*b) > (finalArr[0]* finalArr[0] + finalArr[1] * finalArr[1])){
// // // // // // // // // // // // // //             finalArr = [a,b]
// // // // // // // // // // // // // //         }
// // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // })


// // // // // // // // // // // // // // console.log(finalArr)
// // // // // // // // // // // // // // console.log("010".replace(/^0{0,}/,""))


// // // // // // // // // // // // // let lightRang = [190,70,0,0];
// // // // // // // // // // // // // let lightNum = 4;
// // // // // // // // // // // // // let sumNotLight = 0;
// // // // // // // // // // // // // let moreFar = 0;
// // // // // // // // // // // // // const length = lightRang.length;

// // // // // // // // // // // // // for(let i =0; i<length;i++){
// // // // // // // // // // // // //     let currLightRange = lightRang[i];

// // // // // // // // // // // // //     if(i+1 >= length){
// // // // // // // // // // // // //         console.log(sumNotLight);
// // // // // // // // // // // // //         break;
// // // // // // // // // // // // //     }

// // // // // // // // // // // // //     let nextLightRange = lightRang[i+1];

// // // // // // // // // // // // //     if(currLightRange > 100){
// // // // // // // // // // // // //         i = i + Math.floor(currLightRange/100)

// // // // // // // // // // // // //         moreFar = currLightRange % 100;

// // // // // // // // // // // // //         if(i+1 >= length){
// // // // // // // // // // // // //         console.log(sumNotLight);
// // // // // // // // // // // // //         break;
// // // // // // // // // // // // //         }

// // // // // // // // // // // // //         currLightRange = moreFar;
// // // // // // // // // // // // //         nextLightRange = lightRang[i+1];
// // // // // // // // // // // // //     }
// // // // // // // // // // // // //     console.log(i,currLightRange)
// // // // // // // // // // // // //     if(currLightRange + nextLightRange < 100) sumNotLight = sumNotLight + (100 - currLightRange - nextLightRange);

// // // // // // // // // // // // // }




// // // // // // // // // // // // function deepClone(param, hashMap = new WeakMap()) {
// // // // // // // // // // // //     if(param === null) return param;
// // // // // // // // // // // //     if(typeof param === "object"){
// // // // // // // // // // // //         if(hashMap.get(param)) return hashMap.get(param);
// // // // // // // // // // // //         const newObj = new param.constuctor();
// // // // // // // // // // // //         hashMap.set(param,newObj)
// // // // // // // // // // // //         for(let key in param){
// // // // // // // // // // // //             const item = param[key];
// // // // // // // // // // // //            newObj[key] = deepClone(item,hashMap)
// // // // // // // // // // // //         }
// // // // // // // // // // // //     }else return param;
// // // // // // // // // // // // }
// // // // // // // // // // // let arr =[1];
// // // // // // // // // // // const binary = (arr,target,isLower = false) => {
// // // // // // // // // // //     let answer = arr.length;
// // // // // // // // // // //     let left = 0, right = arr.length - 1,mid;
// // // // // // // // // // //     while(left <= right){
// // // // // // // // // // //         mid = Math.floor((left + right)/2)

// // // // // // // // // // //         if(arr[mid] > target || (isLower && arr[mid] >= target)){
// // // // // // // // // // //              answer = mid;
// // // // // // // // // // //             right = mid-1
// // // // // // // // // // //         }else{
// // // // // // // // // // //             left = mid + 1
// // // // // // // // // // //         }

// // // // // // // // // // //     }

// // // // // // // // // // //     return answer;
// // // // // // // // // // // }

// // // // // // // // // // // var search = function(nums, target) {
// // // // // // // // // // //   const low = binary(nums,target,true);
// // // // // // // // // // //   const high = binary(nums,target) ;

// // // // // // // // // // //     console.log(low,high);
// // // // // // // // // // //     if(low <=high && high <= nums.length){
// // // // // // // // // // //         return high - low ;
// // // // // // // // // // //     }

// // // // // // // // // // //     return 0;
// // // // // // // // // // // };

// // // // // // // // // // // console.log(search(arr,1))
// // // // // // // // // // // a,b,c,d,


// // // // // // // // // // class MyPromise{
// // // // // // // // // //     constructor(excutor){
// // // // // // // // // //         this.arr = [];
// // // // // // // // // //         this.result = null;
// // // // // // // // // //         this.err = null;
// // // // // // // // // //         this.status = "pending"
// // // // // // // // // //         const resolve = (res) => {
// // // // // // // // // //             this.result = res;
// // // // // // // // // //             this.status = "fulfilled";
// // // // // // // // // //             setTimeout(() => {
// // // // // // // // // //                 this.arr.forEach((cb) => cb(res))
// // // // // // // // // //             })

// // // // // // // // // //         };
// // // // // // // // // //         const reject = (err) => {
// // // // // // // // // //             this.status = "reject";
// // // // // // // // // //             this.err = err;
// // // // // // // // // //         };
// // // // // // // // // //         excutor(resolve, reject)
// // // // // // // // // //     }

// // // // // // // // // //     then(cb){
// // // // // // // // // //         return new MyPromise(resolve => {
// // // // // // // // // //             this.arr.push((res) => {
// // // // // // // // // //                 const cbRes = cb(res);
// // // // // // // // // //                if(Object.prototype.toString.call(cbRes).slice(8,-1) == "Promise"){
// // // // // // // // // //                    cbRes.then(res01 => resolve(res01));
// // // // // // // // // //                }else{
// // // // // // // // // //                    resolve(cbRes)
// // // // // // // // // //                }
// // // // // // // // // //             });
// // // // // // // // // //         });
// // // // // // // // // //     }
// // // // // // // // // // }

// // // // // // // // // // let promise = new MyPromise((resolve, reject) => {
// // // // // // // // // //     console.log("Promise执行中")
// // // // // // // // // //     resolve(1)
// // // // // // // // // // })
// // // // // // // // // // promise.then( res => {

// // // // // // // // // //     console.log(Object.prototype.toString.call(res).slice(8,-1))
// // // // // // // // // // }).then(val => {
// // // // // // // // // //     console.log("I am SB")
// // // // // // // // // // })
// // // // // // // // // function Father(){
// // // // // // // // //     this.father = "father";
// // // // // // // // // }
// // // // // // // // // function Son(){
// // // // // // // // //     this.son = "son";
// // // // // // // // // }




// // // // // // // // // const makeNew = function(father,son){

// // // // // // // // //     son.prototype = Object.create( father());
// // // // // // // // //     son.prototype.constructor = son;


// // // // // // // // //     return new son();
// // // // // // // // // }
// // // // // // // // // let a  = makeNew(Father,Son);
// // // // // // // // // console.log(a.father)


// // // // // // // // /**
// // // // // // // //  * 实现一个深拷贝
// // // // // // // //  *
// // // // // // // //  * 要求：
// // // // // // // //  * 1、使用原生 js 实现
// // // // // // // //  * 2、注意编码规范
// // // // // // // //  * 3、不允许使用 JSON.stringify 
// // // // // // // //  * 4、兼容对象、数组多层嵌套的情况
// // // // // // // //  *
// // // // // // // //  * 加分项：
// // // // // // // //  * 1、处理“循环引用”的问题，如 `a.circular = a`
// // // // // // // //  * 2、处理“拷贝两个相同的引用却最终指向不同的对象”的问题，如 `b = {};a = { b: b, bCopy: b }`
// // // // // // // //  * 3、处理对象属性名为 Symbol 的情况
// // // // // // // // **/


// // // // // // // // // function deepClone(target, hash = new WeakMap()) {    
// // // // // // // // //     if(target == null) return;
// // // // // // // // //     if(typeof target != 'object')  return target;
// // // // // // // // //     if(hash.has(target)) return hash.get(target);

// // // // // // // // //     const obj = new target.constructor();
// // // // // // // // //     hash.set(target,obj)


// // // // // // // // //     for(let key of Reflect.ownKeys(target)) {
// // // // // // // // //         if(target.hasOwnProperty(key)){
// // // // // // // // //             obj[key] = deepClone(target[key],hash);
// // // // // // // // //         }
// // // // // // // // //     }

// // // // // // // // //     return obj;
// // // // // // // // // }


// // // // // // // // // /* 测试用例1 */
// // // // // // // // // const book = {
// // // // // // // // //   title: "You Don't Know JS",
// // // // // // // // //   price: 45,
// // // // // // // // // };
// // // // // // // // // const arr = [[0], 1];
// // // // // // // // // const originObj = {
// // // // // // // // //   book: book,
// // // // // // // // //   arr: arr,
// // // // // // // // //   attr1: undefined,
// // // // // // // // //   attr2: null,
// // // // // // // // //   attr3: 123,
// // // // // // // // //   attr4: 'haha',
// // // // // // // // // };
// // // // // // // // // const clonedObj = deepClone(originObj);
// // // // // // // // // originObj.book.price = 0;
// // // // // // // // // console.log(clonedObj.book.price); // 应为45
// // // // // // // // // arr[0].push(3);
// // // // // // // // // console.log(clonedObj.arr); // 应为[[0], 1]


// // // // // // // // // /* 测试用例2（处理“循环引用”的问题） */
// // // // // // // // // const book2 = {
// // // // // // // // //   title: "You Don't Know JS",
// // // // // // // // //   price: 45,
// // // // // // // // // };
// // // // // // // // // const clonedBook2 = deepClone(book2);
// // // // // // // // // book2.title = 'NO';
// // // // // // // // // console.log(clonedBook2.title); // 应为"You Don't Know JS"


// // // // // // // // // /* 测试用例3（处理“拷贝两个相同的引用却最终指向不同的对象”的问题） */
// // // // // // // // // const book3 = {};
// // // // // // // // // const originObj2 = { book3: book3, book3Copy: book3 };
// // // // // // // // // const clonedObj2 = deepClone(originObj2);
// // // // // // // // // clonedObj2.book3.price = 2;
// // // // // // // // // console.log(clonedObj2.book3Copy.price); // 应为2


// // // // // // // // // /* 测试用例4（处理对象属性名为 Symbol 的情况） */
// // // // // // // // // const symbolKey = Symbol('key1');
// // // // // // // // // const originObj3 = { [symbolKey]: 'this is symbol' };
// // // // // // // // // console.log(deepClone(originObj3)[symbolKey]); // 应为"this is symbol"

// // // // // // // // class A {

// // // // // // // // }

// // // // // // // // class B extends A {}
// // // // // // // // let a =  BigInt(111);
// // // // // // // // let b = {[Symbol.toStringTag]: "A" }

// // // // // // // // console.log(Object.prototype.toString.call(new B()))


// // // // // // // /*
// // // // // // //     有两个单链表，链表的节点都是int型值，请把每个链表的int值依序组装起来，并求这两个数的和。

// // // // // // // 示例：

// // // // // // // 链表1: 1 → 2 → 3 ；

// // // // // // // 链表2: 4 → 5;

// // // // // // // 和: 1 6 8
// // // // // // // */

// // // // // // // const sum = (num01, num02) => {
// // // // // // //     let finalStr = "";
// // // // // // //     // 补0
// // // // // // //     if(num01.length > num02.length) {
// // // // // // //         for(let i = 0; i < num01.length - num02.length; i++) {
// // // // // // //            num02 = "0" + num02;
// // // // // // //         }
// // // // // // //     }else{
// // // // // // //          for(let i = 0; i < num01.length - num02.length; i++) {
// // // // // // //            num01 = "0" + num01;
// // // // // // //         }
// // // // // // //     }
// // // // // // //     console.log("进入while前",num01,num02)

// // // // // // //     // temp代表进位 
// // // // // // //     let index = num01.length-1,temp = 0;
// // // // // // //     while(index >= 0){
// // // // // // //         const a = parseInt(num01[index]);
// // // // // // //         const b = parseInt(num02[index]);

// // // // // // //         finalStr = (a + b + temp)%10 + finalStr;
// // // // // // //         temp = Math.floor((a + b + temp) /10) ;
// // // // // // //         index--;
// // // // // // //     }

// // // // // // //     if(parseInt(temp) >= 1) finalStr = "1" + finalStr;
// // // // // // //     return finalStr;
// // // // // // // }

// // // // // // // const fn = (head01,head02) => {
// // // // // // //     let num01 = "", num02 = "";
// // // // // // //     while(head01 || head02){
// // // // // // //         if(head01){
// // // // // // //             num01 =  num01 +  head01.val;
// // // // // // //             head01 = head01.next;
// // // // // // //         }
// // // // // // //         if(head02){
// // // // // // //             num02 =   num02 + head02.val;
// // // // // // //             head02 = head02.next;
// // // // // // //         }
// // // // // // //     }



// // // // // // //     return sum(num01,num02)
// // // // // // // }
// // // // // // // class Node{
// // // // // // //     constructor(val,next = null) {
// // // // // // //         this.val = val;
// // // // // // //         this.next = next;
// // // // // // //     }
// // // // // // // }



// // // // // // // const createTest = () => {
// // // // // // //     let head = new Node(0,null);
// // // // // // //     let p = head;
// // // // // // //     for(let i =0; i < 7;i++){
// // // // // // //         let random =( Math.random() * 100) / 10;
// // // // // // //         p.next = (new Node(Math.floor(random),null))
// // // // // // //         p = p.next;
// // // // // // //     }

// // // // // // //     return head.next;
// // // // // // // }


// // // // // // // let test01 = createTest(), test02  = createTest();

// // // // // // // console.log(fn(test01,test02));

// // // // // // // function father(val){
// // // // // // //     this.father = val;
// // // // // // //     this.fatherFn = () => {
// // // // // // //         console.log("I am Father")
// // // // // // //     }
// // // // // // // }

// // // // // // // function son(val){
// // // // // // //       father.call(this,"SB");
// // // // // // //     this.son = val;
// // // // // // // }
// // // // // // // son.prototype = Object.create(father);
// // // // // // // son.prototype.constructor = son;

// // // // // // // Function.prototype.myBind = function(that,...arg01){
// // // // // // //     const fn = this;
// // // // // // //     const fnLength = fn.length;
// // // // // // //     return function(...arg02){
// // // // // // //         fn.apply(that,[...arg01,...arg02])
// // // // // // //     }
// // // // // // // }


// // // // // // const test =function (a,b,c) {
// // // // // //     c = this.d;
// // // // // //     console.log(a,b,c,this.d)
// // // // // // }

// // // // // // Function.prototype.myBind = function(that ,...arg){
// // // // // //    let fn = this;

// // // // // //    const result = function(...arg01){
// // // // // //        const isNew = new.target !== "undefined"; // 这个是原始bind的一个特性，如果原来的函数bind后又new那么他的this会绑定当前this而不是鑫this
// // // // // //       return fn.apply(isNew ? this :that, [...arg,...arg01])
// // // // // //    }
// // // // // //    result.prototype = fn.prototype; // 记得继承
// // // // // //    return result;
// // // // // // }

// // // // // // var obj = {d: "11"}

// // // // // // const a= test.myBind(obj,"a","b","c")
// // // // // // // a();
// // // // // // const a01 = new a();co
// // // // // let asyncArr = [];
// // // // // for(let i = 0; i <10;i++){
// // // // //     asyncArr.push(
// // // // //         new Promise(resolve => {
// // // // //             setTimeout(() =>{
// // // // //                 resolve(i)

// // // // //             },i*100)
// // // // //         })
// // // // //     )
// // // // // }

// // // // // // Promise.race(asyncArr).then(res => console.log("这里的返回值",res))

// // // // // async function fn(promiseArr,limit){
// // // // //     const finalArr = []
// // // // //     const excutorArr = [];
// // // // //     for(const item of promiseArr){
// // // // //         let p = item.then((res)=>{
// // // // //             const index = excutorArr.indexOf(p);
// // // // //             excutorArr.splice(index,1);
// // // // //             finalArr.push(res)
// // // // //         })
// // // // //         excutorArr.push(p)
// // // // //         if(limit >= excutorArr){
// // // // //             excutorArr.push(p)
// // // // //         }else{
// // // // //             await Promise.race(excutorArr);
// // // // //         }
// // // // //     }

// // // // //     console.log(finalArr)
// // // // // }

// // // // // fn(asyncArr)

// // // // // // console.log(
// // // // // //     asyncPools(3,asyncArr,(res) => {
// // // // // //     console.log("执行了",res)
// // // // // // }).then(res=>console.log("最后的值",res))
// // // // // // )

// // // // // // async function asyncPools(poolLimit, array, iteratorFn) {
// // // // // //     const ret = [];               // 存放所有Promsie对象
// // // // // //   const executing = [];         //正在执行的Promise队列

// // // // // //   for (const item of array) {   
// // // // // //     const p = Promise.resolve().then(() => iteratorFn(item));  //5
// // // // // //     ret.push(p);  
// // // // // //      if (poolLimit <= array.length) { 
// // // // // //          const e = p.then(() => executing.splice(executing.indexOf(e), 1));
// // // // // //          executing.push(e)
// // // // // //         if (executing.length >= poolLimit) {  //10
// // // // // //         await Promise.race(executing);      //11
// // // // // //       } 
// // // // // //      }

// // // // // //   }
// // // // // //    return Promise.all(ret);  
// // // // // // }
// // // // // 实现一个sum 方法，既支持sum(x, y)，又支持sum(x)(y)

// // // sum(2) // => 5
// // let a = sum()
// // console.log(+a(2)(3)(8) )
// // // => 9
// // // sum(2)(3)(4) // => 9

// // function sum(...arg) {
// //     // ...
// //     const argArr = [...arg];
// //      function sum01(...arg01){


// //         if(arg01.length == 0){
// //             // sum01()
// //             return argArr.reduce((pre,lastSum) => pre+lastSum)
// //         }

// //         else {
// //             argArr.push(...arg01)
// //             return sum01;
// //         }
// //     }

// //     sum01.toString = () =>{
// //         return   argArr.reduce((pre,lastSum) => pre+lastSum)
// //     }

// //     return sum01;

// // }


// // // // 实现 判断有效的括号字符串
// // // function isValid(str) {
// // //     let res = true;
// // //     const stack = [];
// // //     for(let i =0; i< str.length; i++){
// // //         const item = str[i];

// // //         if(item == "}"){
// // //            if(stack.pop() != "{" ) res= false;
// // //         }else if( item == "]"){
// // //             if( stack.pop() != "[") res = false;
// // //         }else if( item == ")"){
// // //             if( stack.pop() != "(" ) res = false;
// // //         }
// // //         else{
// // //             stack.push(item);
// // //         }

// // //     }
// // //     if(stack.length != 0) res= false
// // //     console.log(res)
// // //     return res
// // //  // TODO
// // // }

// // // isValid('[({})]') // true
// // // isValid('[](){}') // true
// // // isValid('[]()[]{}') // true
// // // isValid('[{]') // false
// // // isValid('[{]}') // false
// // // isValid('()[') // false

// // console.log((0.1+0.21).toFixed(2))

// /*
// 将有重复数据的数组转成树形结构的数组（需要去重）

// [{id: 3, pId: 2}, {id:2, pId: 1}, {id: 4}, {id:3, pId: 2}, {id: 5, pId: 4}, {id: 1}]

// [{id: 1, child: [{id: 2, pId: 1, child: [{ id: 3, pId: 2}]}]}, {id: 4, child: [{id: 5, pId: 4}]}]
// */
// let test = [{id: 3, pId: 2}, {id:2, pId: 1}, {id: 4}, {id:3, pId: 2}, {id: 5, pId: 4}, {id: 1}];

// const getRoot= (arr) => {
//     const finalArr =[];
//      for(let i=0; i< arr.length;i++){
//          const item = arr[i];
//          if(item.pId == null) finalArr.push(item);
//     }
//     return finalArr;
// }

// const getUnique = (arr) => {
//     const uniqueArr = []
//     const map = new Map();
//       for(let i=0; i< arr.length;i++){
//            const item = arr[i];
//           if(map.has(`${item.id}+${item.pId}`)) continue

//           map.set(`${item.id}+${item.pId}`,item)
//           uniqueArr.push(item)

//     }
//     return uniqueArr;
// }





// const makeTree = (root) => {
//     if(!root) return
//     const rootId = root.id;
//     const childArr = [];

//     for(let i=0; i<test.length;i++){
//         const item = test[i];
//         if(item.pId === rootId) {
//             childArr.push(makeTree(item))
//         }
//     }
//     root.child = childArr
//     return root
// }
// test = getUnique(test);
// const rootArr = getRoot(test);
// const fianlArr = rootArr.map((item,index)=>{
//     return makeTree(item)
// })
// console.log(JSON.stringify(fianlArr))
// // console.log(fianlArr)


class node {
    constructor(val = null, next = null) {
        this.val = val;
        this.next = next;
    }
}


// const fn = (node01, node02) => {
//     const p01 = node01;
//     const p02 = node02;

//     while (p01 != p02) {


//         if (!p01) p01 = node02;
//         else p01 = p01.next;

//         if (!p02) p02 = node01;
//         else p02 = p02.next;

//     }
//     return p01;

// }



async function async1() {
    console.log("async1 start");
    await async2();
    console.log("async1 end");
    setTimeout(() => {
        console.log('timer1')
    }, 0)
}
async function async2() {
    setTimeout(() => {
        console.log('timer2')
    }, 0) 
    console.log("async2");
}
async1();
setTimeout(() => {
            console.log('timer3')
        }, 0)


// async1 start
// async2
// async1 end
// timer3
// timer2
// timer1
